{"version":3,"sources":["components/mainInput/mainInput.js","components/Button/button.js","components/cityCard/cityCard.js","API/Wikipedia/Wikipedia.js","components/cityCardList/cityCardList.js","components/Spinner/spinner.js","App.js","API/OpenAQ/OpenAQ.js","serviceWorker.js","index.js"],"names":["mainInput","props","react_default","a","createElement","className","autoComplete","onSubmit","submit","type","placeholder","onChange","inputH","value","filtred","map","ctr","key","onClick","button","btnType","concat","Object","toConsumableArray","btnClasses","join","clicked","children","CityCard","state","show","description","getDescription","city","_this","setState","axios","get","params","titles","action","prop","origin","format","category","then","res","data","query","pages","keys","extract","undefined","catch","error","console","log","Fragment","this","components_Button_button","Component","cityCardList","list","el","cityCard_cityCard","spinner","App","countries","countryMark","poland","germany","france","spain","mostPollutedCities","autoCompleteCountries","inputValue","loading","inputHandler","e","localStorage","setItem","target","fetchCitiesList","country","inputVal","order_by","sort","parameter","response","results","Set","item","slice","onSubmitHandler","preventDefault","includes","toLowerCase","filter","length","indexOf","clearAutoCompleteCountries","getItem","components_mainInput_mainInput","components_Spinner_spinner","components_cityCardList_cityCardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uWAkCeA,SA/BG,SAAAC,GAChB,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOC,aAAa,MAAMC,SAAUN,EAAMO,QACxDN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,SACEK,KAAK,OACLJ,UAAU,aACVK,YAAY,oBACZC,SAAUV,EAAMW,OAChBC,MAAOZ,EAAMY,QAEfX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACZJ,EAAMa,QAAQC,IAAI,SAAAC,GAAG,OACpBd,EAAAC,EAAAC,cAAA,UACEC,UAAU,oBACVY,IAAKD,EACLE,QAASjB,EAAMW,OACfC,MAAOG,GAENA,OAKTd,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBI,KAAK,UAAxC,wCCdSU,SAVA,SAAAlB,GAAK,OAClBC,EAAAC,EAAAC,cAAA,UACEK,KAAMR,EAAMmB,QACZf,UAAW,CAAC,OAADgB,OAAAC,OAAAC,EAAA,EAAAD,CAAWrB,EAAMuB,aAAYC,KAAK,KAC7CP,QAASjB,EAAMyB,SAEdzB,EAAM0B,YCgCIC,oNApCbC,MAAQ,CACNC,MAAM,EACNC,YAAa,MAGfC,eAAiB,WCRZ,IAAiBC,EDSpBC,EAAKC,SAAS,CAAEL,MAAOI,EAAKL,MAAMC,OAC7BI,EAAKL,MAAME,cCVIE,EDWVC,EAAKjC,MAAMgC,KCVhBG,IACJC,IADI,mEACoE,CACvEC,OAAQ,CACNC,OAAQN,EACRO,OAAQ,QACRC,KAAM,WACNC,OAAQ,IACRC,OAAQ,OACRC,SAAU,UAGbC,KAAK,SAAAC,GACJ,IAAIjC,EACFiC,EAAIC,KAAKC,MAAMC,MAAM3B,OAAO4B,KAAKJ,EAAIC,KAAKC,MAAMC,QAAQE,QAI1D,YAHcC,IAAVvC,IACFA,EAAQ,kBAEHA,IAERwC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MDTDT,KAAK,SAAAC,GAC5BS,QAAQC,IAAIV,GACZZ,EAAKC,SAAS,CAAEJ,YAAae,+EAMjC,OACE5C,EAAAC,EAAAC,cAACF,EAAAC,EAAMsD,SAAP,KACEvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAoBqD,KAAKzD,MAAMgC,MAC7C/B,EAAAC,EAAAC,cAACuD,EAAD,CACEvC,QAAQ,SACRI,WAAY,CAAC,WAAY,aACzBE,QAASgC,KAAK1B,gBAEb0B,KAAK7B,MAAMC,KAAO,QAAU,SAGhC4B,KAAK7B,MAAMC,KACV5B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAwBqD,KAAK7B,MAAME,aAC9C,aA/BW6B,cEWRC,SAZM,SAAA5D,GACnB,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACXJ,EAAM6D,KAAK/C,IAAI,SAAAgD,GAAE,OAChB7D,EAAAC,EAAAC,cAAA,MAAIa,IAAK8C,EAAI1D,UAAU,qBACrBH,EAAAC,EAAAC,cAAC4D,EAAD,CAAU/B,KAAM8B,UCHXE,SAFC,kBAAM/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,0BCsFP6D,6MAjFbrC,MAAQ,CACNsC,UAAW,CAAC,SAAU,UAAW,QAAS,UAC1CC,YAAa,CAAEC,OAAQ,KAAMC,QAAS,KAAMC,OAAQ,KAAMC,MAAO,MACjEC,mBAAoB,GACpBC,sBAAuB,GACvBC,WAAY,GACZC,SAAS,EACTtB,OAAO,KASTuB,aAAe,SAAAC,GACbC,aAAaC,QAAQ,aAAcF,EAAEG,OAAOpE,OAC5CqB,EAAKC,SAAS,CAAEwC,WAAYG,EAAEG,OAAOpE,QACrCqB,EAAK5B,aAAawE,EAAEG,OAAOpE,UAE7BqE,gBAAkB,SAAAC,GC3Bb,IAAiBC,KD4BZD,EC3BH/C,IACJC,IAAI,mCAAoC,CACvCC,OAAQ,CACN6C,QAASC,EACTC,SAAU,wBACVC,KAAM,OACNC,UAAW,UAGd1C,KAAK,SAAA2C,GAEJ,OADAjC,QAAQC,IAAI,MAAOgC,EAASzC,KAAK0C,SAC1BnE,OAAAC,EAAA,EAAAD,CAAI,IAAIoE,IAAIF,EAASzC,KAAK0C,QAAQ1E,IAAI,SAAA4E,GAAI,OAAIA,EAAK1D,SAAQ2D,MAChE,EACA,MAGHvC,MAAM,SAASC,GACdC,QAAQC,IAAIF,MDUGT,KAAK,SAAAC,GACpBZ,EAAKC,SAAS,CAAEsC,mBAAoB3B,IACpCS,QAAQC,IAAIV,QAGhB+C,gBAAkB,SAAAf,GAChB5C,EAAKC,SAAS,CAAEyC,SAAS,EAAMtB,OAAO,IACtCwB,EAAEgB,iBACF5D,EAAKL,MAAMsC,UAAU4B,SAAS7D,EAAKL,MAAM8C,YACrCzC,EAAKgD,gBACHhD,EAAKL,MAAMuC,YAAYlC,EAAKL,MAAM8C,WAAWqB,gBAE/C9D,EAAKC,SAAS,CAAEmB,OAAO,IAC3BpB,EAAKC,SAAS,CAAEyC,SAAS,OAG3BtE,aAAe,SAAAO,GACb,IAAIC,EAAUD,EACVqB,EAAKL,MAAMsC,UAAU8B,OACnB,SAAAd,GAAO,OAIgC,IAHrCA,EACGa,cACAJ,MAAM,EAAG/E,EAAMqF,QACfC,QAAQtF,EAAMmF,iBAErB,GACJ9D,EAAKC,SAAS,CAAEuC,sBAAuB5D,OAGzCsF,2BAA6B,WAC3BlE,EAAKC,SAAS,CAAEuC,sBAAuB,yFAzCvChB,KAAKvB,SAAS,CACZwC,WAAYI,aAAasB,QAAQ,iDA4CnC,OACEnG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMa,QAASwC,KAAK0C,4BACjClG,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,WACAH,EAAAC,EAAAC,cAACkG,EAAD,CACE1F,OAAQ8C,KAAKmB,aACb/D,QAAS4C,KAAK7B,MAAM6C,sBACpB7D,MAAO6C,KAAK7B,MAAM8C,WAClBnE,OAAQkD,KAAKmC,mBAGhBnC,KAAK7B,MAAM+C,QACV1E,EAAAC,EAAAC,cAACmG,EAAD,MACE7C,KAAK7B,MAAMyB,MACbpD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mCAGFF,EAAAC,EAAAC,cAACoG,EAAD,CAAc1C,KAAMJ,KAAK7B,MAAM4C,6BA3EvBb,aEKE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7G,EAAAC,EAAAC,cAAC4G,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxE,KAAK,SAAAyE,GACjCA,EAAaC","file":"static/js/main.eedf681e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./mainInput.css\";\n\nconst mainInput = props => {\n  return (\n    <form className=\"Form\" autoComplete=\"off\" onSubmit={props.submit}>\n      <div className=\"InputContainer\">\n        <input\n          type=\"text\"\n          className=\"Input-text\"\n          placeholder=\"Enter Country ...\"\n          onChange={props.inputH}\n          value={props.value}\n        />\n        <div className=\"Autocomplete-items\">\n          {props.filtred.map(ctr => (\n            <button\n              className=\"Autocomplete-item\"\n              key={ctr}\n              onClick={props.inputH}\n              value={ctr}\n            >\n              {ctr}\n            </button>\n          ))}\n        </div>\n      </div>\n      <button className=\"btn btn-Submit\" type=\"submit\">\n        Submit\n      </button>\n    </form>\n  );\n};\n\nexport default mainInput;\n","import React from \"react\";\nimport \"./button.css\";\n\nconst button = props => (\n  <button\n    type={props.btnType}\n    className={[\"btn\", ...props.btnClasses].join(\" \")}\n    onClick={props.clicked}\n  >\n    {props.children}\n  </button>\n);\n\nexport default button;\n","import React, { Component } from \"react\";\nimport { getData } from \"../../API/Wikipedia/Wikipedia\";\nimport Button from \"../Button/button\";\nimport \"./cityCard.css\";\nclass CityCard extends Component {\n  state = {\n    show: false,\n    description: \"\"\n  };\n\n  getDescription = () => {\n    this.setState({ show: !this.state.show });\n    if (!this.state.description) {\n      getData(this.props.city).then(res => {\n        console.log(res);\n        this.setState({ description: res });\n      });\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"cityCard\">\n          <h2 className=\"cityCard_heading\">{this.props.city}</h2>\n          <Button\n            btnType=\"button\"\n            btnClasses={[\"btn-Info\", \"btn-round\"]}\n            clicked={this.getDescription}\n          >\n            {this.state.show ? \"Close\" : \"More\"}\n          </Button>\n        </div>\n        {this.state.show ? (\n          <p className=\"cityCard_description\">{this.state.description}</p>\n        ) : null}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CityCard;\n","import axios from \"axios\";\n\nexport function getData(city) {\n  return axios\n    .get(`https://en.wikipedia.org/w/api.php?exintro&explaintext&redirects`, {\n      params: {\n        titles: city,\n        action: \"query\",\n        prop: \"extracts\",\n        origin: \"*\",\n        format: \"json\",\n        category: \"city\"\n      }\n    })\n    .then(res => {\n      let value =\n        res.data.query.pages[Object.keys(res.data.query.pages)].extract;\n      if (value === undefined) {\n        value = \"Data not found\";\n      }\n      return value;\n    })\n    .catch(error => console.log(error));\n}\n","import React from \"react\";\nimport CityCard from \"../cityCard/cityCard\";\nimport \"./cityCardList.css\";\nconst cityCardList = props => {\n  return (\n    <ul className=\"cityCardList\">\n      {props.list.map(el => (\n        <li key={el} className=\"cityCardList_item\">\n          <CityCard city={el} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default cityCardList;\n","import React from \"react\";\nimport \"./spinner.css\";\n\nconst spinner = () => <div className=\"loader\">Loading...</div>;\n\nexport default spinner;\n","import React, { Component } from \"react\";\nimport MainInput from \"./components/mainInput/mainInput\";\nimport CityCardList from \"./components/cityCardList/cityCardList\";\nimport Spinner from \"./components/Spinner/spinner\";\nimport { getData } from \"./API/OpenAQ/OpenAQ\";\n\nimport \"./App.css\";\nclass App extends Component {\n  state = {\n    countries: [\"poland\", \"germany\", \"spain\", \"france\"],\n    countryMark: { poland: \"PL\", germany: \"DE\", france: \"FR\", spain: \"ES\" },\n    mostPollutedCities: [],\n    autoCompleteCountries: [],\n    inputValue: \"\",\n    loading: false,\n    error: false\n  };\n\n  componentDidMount() {\n    this.setState({\n      inputValue: localStorage.getItem(\"inputValue\")\n    });\n  }\n\n  inputHandler = e => {\n    localStorage.setItem(\"inputValue\", e.target.value);\n    this.setState({ inputValue: e.target.value });\n    this.autoComplete(e.target.value);\n  };\n  fetchCitiesList = country => {\n    getData(country).then(res => {\n      this.setState({ mostPollutedCities: res });\n      console.log(res);\n    });\n  };\n  onSubmitHandler = e => {\n    this.setState({ loading: true, error: false });\n    e.preventDefault();\n    this.state.countries.includes(this.state.inputValue)\n      ? this.fetchCitiesList(\n          this.state.countryMark[this.state.inputValue.toLowerCase()]\n        )\n      : this.setState({ error: true });\n    this.setState({ loading: false });\n  };\n\n  autoComplete = value => {\n    let filtred = value\n      ? this.state.countries.filter(\n          country =>\n            country\n              .toLowerCase()\n              .slice(0, value.length)\n              .indexOf(value.toLowerCase()) !== -1\n        )\n      : [];\n    this.setState({ autoCompleteCountries: filtred });\n  };\n\n  clearAutoCompleteCountries = () => {\n    this.setState({ autoCompleteCountries: [] });\n  };\n\n  render() {\n    return (\n      <div className=\"App\" onClick={this.clearAutoCompleteCountries}>\n        <header className=\"Header\">\n          <h1 className=\"Logo\">skygate</h1>\n          <MainInput\n            inputH={this.inputHandler}\n            filtred={this.state.autoCompleteCountries}\n            value={this.state.inputValue}\n            submit={this.onSubmitHandler}\n          />\n        </header>\n        {this.state.loading ? (\n          <Spinner />\n        ) : this.state.error ? (\n          <div>\n            <h2>Error City not found</h2>\n          </div>\n        ) : (\n          <CityCardList list={this.state.mostPollutedCities} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import axios from \"axios\";\n\nexport function getData(inputVal) {\n  return axios\n    .get(\"https://api.openaq.org/v1/latest\", {\n      params: {\n        country: inputVal,\n        order_by: \"measurements[0].value\",\n        sort: \"desc\",\n        parameter: \"pm25\"\n      }\n    })\n    .then(response => {\n      console.log(\"Log\", response.data.results);\n      return [...new Set(response.data.results.map(item => item.city))].slice(\n        0,\n        10\n      );\n    })\n    .catch(function(error) {\n      console.log(error);\n    });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}